v0.1.2

** 创建版本库
在工作目录下执行: git init

** 添加文件到版本库
两步：
1. git add learngit.txt

2. git commit -m "wrote a learngit note"
-m 后面输入本次提交的说明，任意文字，但当然是希望是对描述修改的有意义的文字

[master (root-commit) da0313a] wrote a learngit note
 1 file changed, 1 insertion(+)
 create mode 100644 learngit.txt
执行后git 告诉我们 1个文件被变更，插入了1行内容。

** 将变更提交到版本库
提交变更和增加文件的操作一样，都是git add然后跟git commit
提交修改文件跟增加新文件的操作一样
1. git add learngit.txt
2. git commit -m "add how to upload changes"

[master 710675b] add how to upload changes
 1 file changed, 12 insertions(+)

** 检查变更
可以用git diff命令查看 当前工作区文件和暂存区或版本库文件的差异 。
在执行git add 前，显示的是工作区文件和版本区之间的差异。
在执行git add 后，显示的是工作区文件和暂存区之间的差异。
再次执行 git add后，由于暂存区和工作区一致了，git diff也就不会显示差异了。
git diff learngit.txt
用来查看文件的版本间差异，默认是查看当前文件和库文件之间的区别
diff --git a/learngit.txt b/learngit.txt
index 5f04ebf..bc1b225 100644
--- a/learngit.txt
+++ b/learngit.txt
@@ -12,3 +12,15 @@ git commit -m "wrote a learngit note"

 Git is a distributed version control system.
 Git is free software.
+
+git diff learngit.txt
+用来查看文件的版本间差异，默认是查看当前文件和库文件之间的区别
+
+git status
+用来查看库的状态，如果有变化则有显示，无变化则无回显
+
+
+
+
+
+

** 查看当前变更状态的命令
git status
用来查看库的状态，如果有变化则有显示，无变化则无回显
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   learngit.txt

no changes added to commit (use "git add" and/or "git commit -a")


** 查看过往的变更记录
* 可以通过 git log 查看提交记录
commit 710675b4c5f1fd219124a014b671cf1f14d191af
Author: bigGavin <guowei_man@126.com>
Date:   Thu Feb 25 20:39:59 2016 +0800

    add how to upload changes

commit 29d38aacfdd609841a323cb297212b46eda153dc
Author: bigGavin <guowei_man@126.com>
Date:   Thu Feb 25 20:34:00 2016 +0800

    change to UTF-8

commit 57fa415fc0be00b9f2ce65fe6c53ddd7644e4eb1
Author: bigGavin <guowei_man@126.com>
Date:   Thu Feb 25 20:32:50 2016 +0800

    add and commit operation

commit da0313a560b94c788109ace064c19044d6baf6c2
Author: bigGavin <guowei_man@126.com>
Date:   Thu Feb 25 20:23:47 2016 +0800

    wrote a learngit note

* git log --pretty=oneline
可以将每次版本变更显示为一行概要信息
710675b4c5f1fd219124a014b671cf1f14d191af add how to upload changes
29d38aacfdd609841a323cb297212b46eda153dc change to UTF-8
57fa415fc0be00b9f2ce65fe6c53ddd7644e4eb1 add and commit operation
da0313a560b94c788109ace064c19044d6baf6c2 wrote a learngit note

如上，注意log的显示是倒叙的，最后的更改在最上面
710675b4c5f1fd219124a014b671cf1f14d191af是commit id（版本号）

** 版本回退
版本回退使用 git reset 命令
git reset --hard HEAD^

测试一下：
$ git commit -m "add how to see git log and how to go back to old version"
[master f746122] add how to see git log and how to go back to old version
 1 file changed, 72 insertions(+)
记住这个 f746122 ，一会儿回来还要用

$ git reset --hard HEAD^
HEAD is now at 710675b add how to upload changes
这就回到了上次提交的版本 710675b4c5f1fd219124a014b671cf1f14d191af add how to upload changes

$ git reset --hard HEAD^^
HEAD is now at 57fa415 add and commit operation
这次直接回跳两个版本到了 57fa415fc0be00b9f2ce65fe6c53ddd7644e4eb1 add and commit operation

穿越结束，可以回到现实了
$ git reset --hard f746122
HEAD is now at f746122 add how to see git log and how to go back to old version
好了，找回了刚才敲得一堆文字了吧

** 查看过往的所有历史日志的命令
如果已经回退了，且关闭了命令行，还想回到当前版本怎么办？ 用git reflog命令
$ git reflog
764b194 HEAD@{0}: commit: add test of go back and go current
f746122 HEAD@{1}: reset: moving to f746122
57fa415 HEAD@{2}: reset: moving to HEAD^^
710675b HEAD@{3}: reset: moving to HEAD^
f746122 HEAD@{4}: commit: add how to see git log and how to go back to old version
710675b HEAD@{5}: commit: add how to upload changes
29d38aa HEAD@{6}: commit: change to UTF-8
57fa415 HEAD@{7}: commit: add and commit operation
da0313a HEAD@{8}: commit (initial): wrote a learngit note
这里记录了所有commit操作，只要输入commit命令行开头的数字串，就可返回对应的版本点
例如:
git reset --hard 764b194 

* git log 和 git reflog的差别
当你用 git reset --hard commit_id 返回到之前的某个版本后
git log 只能查看那个版本及之前的变更记录，之后的变更都看不到了
git reflog 则可以查看所有变更记录，包括reset操作。

**工作区，暂存区的概念
当前的superant目录就是 工作区
git add就是将文件提交到 暂存区
git commit 就是讲文件提交到 当前分支master（由创建Git版本库时自动创建）

我们再当前工作区 增加了一个新的文件 license.txt
查看一下当前状态：

$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   learngit.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        license.txt

no changes added to commit (use "git add" and/or "git commit -a")

由于license.txt 还没有加入Git版本库，所以显示为 Untracked files

用git add learngit.txt license.txt 将两个文件都提交到 暂存区，再看看状态

Gavin@WIN-M2A9FMGQ5KJ MINGW64 ~/superant (master)
$ git add learngit.txt license.txt

Gavin@WIN-M2A9FMGQ5KJ MINGW64 ~/superant (master)
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        modified:   learngit.txt
        new file:   license.txt

看到一个词 unstage，这句告诉我们当前learngit.txt 及 license.txt 处于暂存区（stage）

git commit -m "add learn of workspace and stage"

提交后，再看看 status是什么情况

Gavin@WIN-M2A9FMGQ5KJ MINGW64 ~/superant (master)
$ git commit -m "add learn about workspace and stage"
[master 7867955] add learn about workspace and stage
 2 files changed, 5 insertions(+)
 create mode 100644 license.txt

Gavin@WIN-M2A9FMGQ5KJ MINGW64 ~/superant (master)
$ git status
On branch master
nothing to commit, working directory clean

提交变更，stage的内容进入版本库，工作区就干净了。

** git add之后的修改只保留在工作区，没有再次执行 git add 前，这些修改在执行git commit时不会提交到版本库

测试一下：1234^5678^9012
这次执行git add前，我只添加了 ^5678.在git add执行之后，我再来添加 ^9012

我增加了^9012后，用git status查看发现
Gavin@WIN-M2A9FMGQ5KJ MINGW64 ~/superant (master)
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        modified:   learngit.txt

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   learngit.txt

learngit.txt有两个状态记录：
1. Changes to be committed
2. Changes not staged for commit
说明 当前工作区中有没有提交到 暂存区的变更，也就是我们新增的^9012

这时候执行 git commit 只会提交^5678，可以测试一下
Gavin@WIN-M2A9FMGQ5KJ MINGW64 ~/superant (master)
$ git commit -m "this commit only add ^5678"
[master c3844b0] this commit only add ^5678
 1 file changed, 2 insertions(+), 1 deletion(-)

比较一下工作区和版本库之间的差异

-----------------------------------------------------
$ git diff learngit.txt
diff --git a/learngit.txt b/learngit.txt
index 393e14b..86fa509 100644
--- a/learngit.txt
+++ b/learngit.txt
@@ -187,9 +187,36 @@ nothing to commit, working directory clean

 ** git add之后的修改只保留在工作区，没有再次执行 git add 前，这些修改在执行git commit时不会提交到版本库

-测试一下：1234^5678
+测试一下：1234^5678^9012
 这次执行git add前，我只添加了 ^5678.在git add执行之后，我再来添加 ^9012

+我增加了^9012后，用git status查看发现
+Gavin@WIN-M2A9FMGQ5KJ MINGW64 ~/superant (master)
+$ git status
+On branch master
+Changes to be committed:
+  (use "git reset HEAD <file>..." to unstage)
+
+        modified:   learngit.txt
+
+Changes not staged for commit:
+  (use "git add <file>..." to update what will be committed)
+  (use "git checkout -- <file>..." to discard changes in working directory)
+
+        modified:   learngit.txt
+
+learngit.txt有两个状态记录：
+1. Changes to be committed
+2. Changes not staged for commit
+说明 当前工作区中有没有提交到 暂存区的变更，也就是我们新增的^9012
+
+这时候执行 git commit 只会提交^5678，可以测试一下
+Gavin@WIN-M2A9FMGQ5KJ MINGW64 ~/superant (master)
+$ git commit -m "this commit only add ^5678"
+[master c3844b0] this commit only add ^5678
+ 1 file changed, 2 insertions(+), 1 deletion(-)
+
+比较一下工作区和版本库之间的差异


-----------------------------------------------------------------

可见工作区和版本库中相比 ^9012 没有被加入，再次执行git add 和 git commit 才能将后面的变更更新到版本库中

** 撤销修改
撤销在不同的几个状态时，操作是不同的。
1. 没有执行git add 前，撤销修改
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   learngit.txt

no changes added to commit (use "git add" and/or "git commit -a")

如上，git status 告诉我们 可以用git checkout -- learngit.txt将版本库中的文件重新取回来，达到忽略工作区修改的目的

2. 执行了git add之后，但还没有执行git commit时，撤销修改
Gavin@WIN-M2A9FMGQ5KJ MINGW64 ~/superant (master)
$ git add learngit.txt

Gavin@WIN-M2A9FMGQ5KJ MINGW64 ~/superant (master)
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        modified:   learngit.txt

如上，git status 告诉我们 用 git reset HEAD learngit.txt 可以将暂存区(stage)中的变更撤销

Gavin@WIN-M2A9FMGQ5KJ MINGW64 ~/superant (master)
$ git reset HEAD learngit.txt
Unstaged changes after reset:
M       learngit.txt

Gavin@WIN-M2A9FMGQ5KJ MINGW64 ~/superant (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   learngit.txt

no changes added to commit (use "git add" and/or "git commit -a")

这里执行 git reset HEAD learngit.txt 后，其实只是将暂存区清空了，工作区的修改并没撤销，你自己修改回来就行了。

3. 执行了git add 后，还执行了git commit,还想撤销修改？
简单，利用前面的版本回退功能啦： git reset --hard HEAD


** 删除文件
1. 本地删除并不会影响版本库中的文件
2. git rm filename 才真正从版本库中删除了文件，别忘了删除后还得 git commit

Gavin@WIN-M2A9FMGQ5KJ MINGW64 ~/superant (master)
$ git add learngit.txt deletme.txt

Gavin@WIN-M2A9FMGQ5KJ MINGW64 ~/superant (master)
$ git commit -m "about delet file from Repository"
[master 59deb57] about delet file from Repository
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 deletme.txt

Gavin@WIN-M2A9FMGQ5KJ MINGW64 ~/superant (master)
$ git rm deletme.txt
rm 'deletme.txt'

Gavin@WIN-M2A9FMGQ5KJ MINGW64 ~/superant (master)
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        deleted:    deletme.txt


Gavin@WIN-M2A9FMGQ5KJ MINGW64 ~/superant (master)
$ git commit -m "real delete file from Repository"
[master 9e50a35] real delete file from Repository
 1 file changed, 0 insertions(+), 0 deletions(-)
 delete mode 100644 deletme.txt

** 与GitHub配合实现远程版本库
在superant目录下执行 git remote add origin git@github.com:theBigGavin/learnGit.git
执行上面的命令在GitHub上为superant项目创建一个名为origin的远程库 
origin 是远程库的名字
theBigGavin 是你的GitHub账号名

执行 git push -u origin master 实现将本地库的所有内容推送到远程库中
The authenticity of host 'github.com (192.30.252.131)' can't be established.
RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'github.com,192.30.252.131' (RSA) to the list of known hosts.
Counting objects: 50, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (40/40), done.
Writing objects: 100% (50/50), 8.12 KiB | 0 bytes/s, done.
Total 50 (delta 12), reused 0 (delta 0)
To git@github.com:theBigGavin/learnGit.git
 * [new branch]      master -> master
Branch master set up to track remote branch master from origin.

由于远程库是空的，第一推送master分支时，通过-u参数 将本地的master分支内容推送到远程的新master分支，
还会把本地的master分支和远程的master分支关联起来，以后的推送或者拉取时就可以简化命令


** 从远程库克隆到本地库
$ git clone git@github.com:theBigGavin/cloneme.git
Cloning into 'cloneme'...
remote: Counting objects: 3, done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
Receiving objects: 100% (3/3), done.
Checking connectivity... done.

** 分支
通过下面的操作创建一个dev分支
$ git checkout -b dev
M       learngit.txt
Switched to a new branch 'dev'

* git checkout -b 相当于以下两个命令的组合
git branch dev
git checkout dev

* 查看分支,当前的分支前会加一个*
$ git branch
* dev
  master

* 在分支间切换
$ git checkout dev
M       learngit.txt
Switched to branch 'dev'

当前在dev分支，我们提交变化

然后切换到master分支，

* 在master 分支上，我们现在是看不到dev分支上增加的信息的。

* 合并分支 git merge dev








